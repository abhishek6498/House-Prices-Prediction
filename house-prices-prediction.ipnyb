{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/abhishektiwari64/house-prices-prediction?scriptVersionId=144829741\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"40ea1084-6f98-4082-8b26-d78b75929067","_cell_guid":"b68037dc-649e-41af-8f69-4584de8f8bc2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:38.057542Z","iopub.execute_input":"2023-10-01T05:55:38.058079Z","iopub.status.idle":"2023-10-01T05:55:38.071834Z","shell.execute_reply.started":"2023-10-01T05:55:38.058028Z","shell.execute_reply":"2023-10-01T05:55:38.070401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Stage 1. Data acquisition","metadata":{"_uuid":"209a65d0-e1d7-49e1-b617-ab3b00a5bd4d","_cell_guid":"0e9889b3-24f6-4787-85ec-ebb2f5d784ca","trusted":true}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"5cff511e-0c10-4706-8a4f-fc0b477c90a3","_cell_guid":"260b8a1c-76c5-4fc9-96af-33f0bb006a33","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:38.07408Z","iopub.execute_input":"2023-10-01T05:55:38.074417Z","iopub.status.idle":"2023-10-01T05:55:39.287117Z","shell.execute_reply.started":"2023-10-01T05:55:38.074389Z","shell.execute_reply":"2023-10-01T05:55:39.286136Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Import the file train.csv and save it in a variable train_df","metadata":{"_uuid":"d05e7b03-114d-49a5-a0bc-3079e07d65a6","_cell_guid":"f0200a3b-1b20-49e8-bbb9-9feb3d9fef97","trusted":true}},{"cell_type":"code","source":"train_df = pd.read_csv(\"../input/house-prices-advanced-regression-techniques/train.csv\", index_col=\"Id\")","metadata":{"_uuid":"f3fe2873-8931-401b-981b-b32ec092dadb","_cell_guid":"0f5b2846-a1b4-4d5f-b9bb-10792d25d67f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.288465Z","iopub.execute_input":"2023-10-01T05:55:39.288941Z","iopub.status.idle":"2023-10-01T05:55:39.361219Z","shell.execute_reply.started":"2023-10-01T05:55:39.288886Z","shell.execute_reply":"2023-10-01T05:55:39.36021Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df.head()","metadata":{"_uuid":"5ee95d93-71f0-4e35-9ed6-ac31c000d27c","_cell_guid":"9b034ac3-bc17-45d5-bd86-0bb041d1d807","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.362292Z","iopub.execute_input":"2023-10-01T05:55:39.363172Z","iopub.status.idle":"2023-10-01T05:55:39.395627Z","shell.execute_reply.started":"2023-10-01T05:55:39.363126Z","shell.execute_reply":"2023-10-01T05:55:39.394028Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"General information","metadata":{"_uuid":"7920abfe-0e42-4bd4-bdda-62e40465e0fc","_cell_guid":"ae503461-d9a7-4ebf-9f32-27cfff51a3b2","trusted":true}},{"cell_type":"code","source":"train_df.info()","metadata":{"_uuid":"8e825f73-e15c-42eb-ae4d-526820ba4d98","_cell_guid":"8e27702b-d6c0-4553-9436-d0111692c42d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.399444Z","iopub.execute_input":"2023-10-01T05:55:39.399972Z","iopub.status.idle":"2023-10-01T05:55:39.433158Z","shell.execute_reply.started":"2023-10-01T05:55:39.399899Z","shell.execute_reply":"2023-10-01T05:55:39.431455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's find missing values","metadata":{"_uuid":"6151bc94-cdd6-454e-b018-9942cb922d1d","_cell_guid":"a4654690-9cff-4193-bdc4-b1eb56d94dd3","trusted":true}},{"cell_type":"code","source":"train_df.isnull().sum()[train_df.isnull().sum() > 0]","metadata":{"_uuid":"9f92a492-89f2-4c19-9539-332272a018d1","_cell_guid":"949cc27f-5c31-49bb-8c7e-7387fa064b91","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.43501Z","iopub.execute_input":"2023-10-01T05:55:39.435733Z","iopub.status.idle":"2023-10-01T05:55:39.45383Z","shell.execute_reply.started":"2023-10-01T05:55:39.435688Z","shell.execute_reply":"2023-10-01T05:55:39.452711Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's generate descriptive statistics.","metadata":{"_uuid":"1b6556cf-21f0-42aa-b546-39cce0c82915","_cell_guid":"2df9c14e-1e60-4952-9d15-9c47931a4926","trusted":true}},{"cell_type":"code","source":"train_df.describe(include=[\"int64\", \"float64\"])","metadata":{"_uuid":"2af1f342-7d8b-4c9e-bc85-6c34278c9224","_cell_guid":"035f0286-a44d-4f52-b9d6-57794b14db40","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.455253Z","iopub.execute_input":"2023-10-01T05:55:39.456108Z","iopub.status.idle":"2023-10-01T05:55:39.559787Z","shell.execute_reply.started":"2023-10-01T05:55:39.456064Z","shell.execute_reply":"2023-10-01T05:55:39.558662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Stage 2. EDA and Data preprocessing","metadata":{"_uuid":"133f5e5d-7919-4e7b-b1ce-d2dc2fc782af","_cell_guid":"c524af30-be1d-4bb5-9156-d277adf51403","trusted":true}},{"cell_type":"markdown","source":"Let's see the correlation of parameters on the heat map","metadata":{"_uuid":"20c20163-8f02-43b4-bdc3-021df3615684","_cell_guid":"82a69572-c785-4795-8ef4-27827c15562e","trusted":true}},{"cell_type":"code","source":"# following are initialized for later use in notebook\nquantitative_train_df = train_df.select_dtypes(include=[\"int64\", \"float64\"])\nquantitative_variables = list(quantitative_train_df.columns)\nquantitative_variables.remove(\"SalePrice\")\nqualitative_train_df = train_df.select_dtypes(include=[\"object\"])\nqualitative_variables = list(qualitative_train_df.columns)","metadata":{"_uuid":"8ed03172-da2b-41bb-891c-c354cc88074b","_cell_guid":"9ebcf5ad-5ece-4e37-a1d0-5e409d715372","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.56146Z","iopub.execute_input":"2023-10-01T05:55:39.562163Z","iopub.status.idle":"2023-10-01T05:55:39.570575Z","shell.execute_reply.started":"2023-10-01T05:55:39.562121Z","shell.execute_reply":"2023-10-01T05:55:39.569392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(14,7))\nsns.heatmap(data=quantitative_train_df.corr(), annot=True, annot_kws={\"size\": 6},cmap='coolwarm', linewidths=.5)","metadata":{"_uuid":"99c5a59d-172b-4766-a0df-dfbdd813d159","_cell_guid":"87fb7b8d-6f56-4ea7-808b-8103667dbd1c","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:39.572648Z","iopub.execute_input":"2023-10-01T05:55:39.573384Z","iopub.status.idle":"2023-10-01T05:55:43.707608Z","shell.execute_reply.started":"2023-10-01T05:55:39.573338Z","shell.execute_reply":"2023-10-01T05:55:43.70637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"On the heat map, we see that the **OverallQual**, **GrLivArea** columns has the highest correlation with the **SalePrice** column.","metadata":{"_uuid":"edff30ff-8707-4c0b-90d5-b6aca7051e60","_cell_guid":"19419500-4580-4637-9ecb-cb90889bb768","trusted":true}},{"cell_type":"code","source":"sns.displot(data=quantitative_train_df, x=\"SalePrice\", kde=True)\nplt.xticks(rotation=45, ha=\"right\")\nplt.xlabel(\"Sale Prices\")\nplt.ylabel(\"Frequency\")\nplt.title(\"Distribution of Sale Prices\")","metadata":{"_uuid":"0171db87-c8e6-4c0e-99c4-100ce632c771","_cell_guid":"2de8d9c5-8f18-44c8-860b-4058c06c8173","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:43.709221Z","iopub.execute_input":"2023-10-01T05:55:43.709801Z","iopub.status.idle":"2023-10-01T05:55:44.272847Z","shell.execute_reply.started":"2023-10-01T05:55:43.709764Z","shell.execute_reply":"2023-10-01T05:55:44.271576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Conclusion**: \n\nThe chart shows that most prices are in the region of 100 000-125 000.","metadata":{"_uuid":"07840f8a-0737-4f08-8c11-8d68a2135bb4","_cell_guid":"f87a275a-f185-42cb-96ca-72e08dc06ed9","trusted":true}},{"cell_type":"code","source":"sns.jointplot(data=quantitative_train_df, x=\"GrLivArea\", y=\"SalePrice\")","metadata":{"_uuid":"a361455f-3837-44cd-b604-57223dbc26c2","_cell_guid":"b3bdc8fe-f086-429f-86bb-c7dc3d686b44","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:44.273991Z","iopub.execute_input":"2023-10-01T05:55:44.274277Z","iopub.status.idle":"2023-10-01T05:55:45.099626Z","shell.execute_reply.started":"2023-10-01T05:55:44.274252Z","shell.execute_reply":"2023-10-01T05:55:45.09841Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Conclusion**:\n\nThe graph shows that most buildings are between 750 and 2 000 square feet.","metadata":{"_uuid":"d68c23af-bd9a-4efb-bcf0-4395feb76f2b","_cell_guid":"b9e03857-8fb1-4cf4-b0ce-ee82a70d1312","trusted":true}},{"cell_type":"code","source":"B_S = sns.catplot(x='BldgType', y='SalePrice', data=train_df, kind='bar')\nfor ax in B_S.axes.flat:\n    for p in ax.patches:\n        x_coord = p.get_x() + 0.5 * p.get_width()\n        value = p.get_height()\n        ax.annotate(f'{value:.0f}', (x_coord, value), ha='left')\nplt.xlabel('Building Type (BldgType)')\nplt.ylabel('Mean Sale Price')\nplt.title('Mean Sale Price by Building Type')","metadata":{"_uuid":"a9b20740-467c-4d02-8cca-16003ca85caf","_cell_guid":"5984feba-84c3-45b9-872b-a4b0776301a1","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:45.100866Z","iopub.execute_input":"2023-10-01T05:55:45.101304Z","iopub.status.idle":"2023-10-01T05:55:45.65303Z","shell.execute_reply.started":"2023-10-01T05:55:45.101261Z","shell.execute_reply":"2023-10-01T05:55:45.651842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Conclusion:**\n\nThe graph shows that the highest average price for buildings of the type **1Fam** and **TwnhsE**.","metadata":{"_uuid":"9ba1ee13-a8c1-4e95-91ad-56fb7e78eb4b","_cell_guid":"16b5c0ce-e09a-4bee-879a-cd227d171e52","trusted":true}},{"cell_type":"code","source":"M = sns.countplot(data=train_df, x=\"MSZoning\")\nfor p in M.patches:\n    x_coord = p.get_x() + 0.5 * p.get_width()\n    value = p.get_height()\n    M.annotate(f'{value:.0f}', (x_coord, value), ha='center', va='bottom')\nplt.xlabel('Zoning Type')\nplt.ylabel('Count of properties')\nplt.title('Distribution of Zoning Types')","metadata":{"_uuid":"83ffe3ce-6a9c-4f66-b095-bad0f35da937","_cell_guid":"ea00c143-f6f1-4d3a-842f-103ac125c54a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:45.654249Z","iopub.execute_input":"2023-10-01T05:55:45.654574Z","iopub.status.idle":"2023-10-01T05:55:45.939005Z","shell.execute_reply.started":"2023-10-01T05:55:45.654547Z","shell.execute_reply":"2023-10-01T05:55:45.937687Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Conclusion:**\n\nThe graph shows that a significantly larger number of buildings with zoning type **RL**.","metadata":{"_uuid":"657009f6-98ee-44f2-9ba2-007c556930a1","_cell_guid":"cfe657db-b6b7-40a4-ad4a-bd07724a41b7","trusted":true}},{"cell_type":"code","source":"plt.figure(figsize=(15,6))\nsns.boxplot(data=train_df, x=\"Neighborhood\", y=\"SalePrice\")\nplt.xlabel(\"Neighborhood\")\nplt.ylabel(\"SalePrice\")\nplt.xticks(rotation=45)\nplt.title(\"Neighborhood vs SalePrice\")","metadata":{"_uuid":"55546c4d-c89d-405d-a8b0-7bda193d86ad","_cell_guid":"5f74fc29-dbee-43f1-a6e6-ede650dc617e","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:45.943554Z","iopub.execute_input":"2023-10-01T05:55:45.943905Z","iopub.status.idle":"2023-10-01T05:55:46.721982Z","shell.execute_reply.started":"2023-10-01T05:55:45.943877Z","shell.execute_reply":"2023-10-01T05:55:46.720899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Conclusion:**\n\nThe graph shows that the largest price fork is observed in neighborhoods **NridgHt** and **StoneBr**","metadata":{"_uuid":"cbac3eb5-de98-454b-8b68-44b1e4af3157","_cell_guid":"ed59e19f-9b9f-4166-a2a2-78da7de61ecb","trusted":true}},{"cell_type":"markdown","source":"By looking at Doument.txt, all of categorical(Except CentralAir) seems to be of ordinal type. Hence, I will use Label Encoding to encode categorical variables.","metadata":{"_uuid":"69e00c0e-9bec-4b28-b87c-e56e2945c736","_cell_guid":"f46155db-3e94-4f2c-a3d4-b0cd3fd75210","trusted":true}},{"cell_type":"code","source":"train_df['MSZoning'] = train_df['MSZoning'].replace({'RM': 1, 'RP': 2, 'RL': 3, 'RH': 4, 'I': 5, 'FV': 6, 'C': 7, 'A': 8, 'C (all)': np.nan})\n\ntrain_df['Street'] = train_df['Street'].replace({'Pave': 1, 'Grvl': 2})\n\ntrain_df['Alley'] = train_df['Alley'].replace({'NA': 1, 'Pave': 2, 'Grvl': 3})\n\ntrain_df['LotShape'] = train_df['LotShape'].replace({'IR3': 1,'IR2': 2, 'IR1': 3, 'Reg': 4})\n\ntrain_df['LandContour'] = train_df['LandContour'].replace({'Low': 1,'HLS': 2, 'Bnk': 3, 'Lvl': 4})\n\ntrain_df['Utilities'] = train_df['Utilities'].replace({'ELO': 1, 'NoSeWa': 2, 'NoSewr': 3, 'AllPub': 4})\n\ntrain_df['LotConfig'] = train_df['LotConfig'].replace({'FR3': 1, 'FR2': 2, 'CulDSac': 3, 'Corner': 4, 'Inside': 5})\n\ntrain_df['LandSlope'] = train_df['LandSlope'].replace({'Gtl': 1, 'Mod': 2, 'Sev': 3})\n\ntrain_df['Neighborhood'] = train_df['Neighborhood'].replace({'Veenker': 0,'Timber': 1, 'StoneBr': 2, 'Somerst': 3, 'SawyerW': 4, 'Sawyer': 5,\n                                                           'SWISU': 6,'OldTown': 7, 'NWAmes': 8, 'NridgHt': 9, 'NPkVill': 10, 'NoRidge': 11,\n                                                           'Names': 12,'Mitchel': 13, 'MeadowV': 14, 'IDOTRR': 15, 'Gilbert': 16, 'Edwards': 17,\n                                                           'Crawfor': 18,'CollgCr': 19, 'ClearCr': 20, 'BrkSide': 21, 'BrDale': 22, 'Blueste': 23,\n                                                           'Blmngtn': 24, 'NAmes': 12})\n\ntrain_df['Condition1'] = train_df['Condition1'].replace({'RRAe': 1,'RRNe':2, 'PosA': 3, 'PosN': 4,'RRAn': 5,\n                                                           'RRNn': 6,'Norm': 7,'Feedr': 8, 'Artery': 9})\n\ntrain_df['Condition2'] = train_df['Condition2'].replace({'RRAe': 1,'RRNe':2, 'PosA': 3, 'PosN': 4,'RRAn': 5,\n                                                           'RRNn': 6,'Norm': 7,'Feedr': 8, 'Artery': 9})\n\ntrain_df['BldgType'] = train_df['BldgType'].replace({'TwnhsI': 1, 'TwnhsE': 2, 'Duplx': 3, '2FmCon': 4, '1Fam': 5, 'Duplex': 3, '2fmCon': 4, \n                                                     'Twnhs': 2})\n\ntrain_df['HouseStyle'] = train_df['HouseStyle'].replace({'SLvl': 1, 'SFoyer': 2, '2.5Unf': 3, '2.5Fin': 4,'2Story': 5,\n                                                           '1.5Unf': 6,'1.5Fin': 7,'1Story': 8})\n\ntrain_df['RoofStyle'] = train_df['RoofStyle'].replace({'Shed': 1, 'Mansard': 2, 'Hip': 3, 'Gambrel': 4, 'Gable' : 5, 'Flat': 6})\n\ntrain_df['RoofMatl'] = train_df['RoofMatl'].replace({'ClyTile': 8,'CompShg': 7, 'Membran': 6, 'Metal': 5,'Roll': 4,\n                                                     'Tar&Grv': 3,'WdShake': 2,'WdShngl': 1})\n\ntrain_df['Exterior1st'] = train_df['Exterior1st'].replace({'WdShing': 1, 'Wd Sdng': 2, 'VinylSd': 3, 'Stucco': 4, 'Stone': 5,\n                                                           'PreCast': 6,'Plywood': 7, 'Other': 8, 'MetalSd': 9, 'ImStucc': 10,\n                                                           'HdBoard': 11,'CemntBd': 12,'CBlock': 13, 'BrkFace': 14, 'BrkComm': 15,\n                                                           'AsphShn': 16, 'AsbShng': 17})\n\ntrain_df['Exterior2nd'] = train_df['Exterior2nd'].replace({'VinylSd': 1, 'Wd Sdng': 2, 'HdBoard': 3, 'Plywood': 4, 'MetalSd': 5, 'Brk Cmn': 6,\n                                                         'CmentBd': 7, 'ImStucc': 8, 'Wd Shng': 9, 'AsbShng': 10, 'Stucco': 11, 'CBlock': 12,\n                                                         'BrkFace': 13, 'AsphShn': 14,'Stone': 15,'Other': 16})","metadata":{"_uuid":"0718959a-1b84-4fec-90cf-d142f88c7c7d","_cell_guid":"91b181a4-2021-44f1-b60e-207bf1ddd9d9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.723467Z","iopub.execute_input":"2023-10-01T05:55:46.723793Z","iopub.status.idle":"2023-10-01T05:55:46.773396Z","shell.execute_reply.started":"2023-10-01T05:55:46.723764Z","shell.execute_reply":"2023-10-01T05:55:46.77242Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df['MasVnrType'] = train_df['MasVnrType'].replace({'Stone': 1, 'None': 2, 'CBlock': 3, 'BrkFace': 4, 'BrkCmn' : 5})\n\ntrain_df['ExterQual'] = train_df['ExterQual'].replace({'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4,'Ex' : 5})\n\ntrain_df['ExterCond'] = train_df['ExterCond'].replace({'Po' : 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4,'Ex' : 5})\n\ntrain_df['Foundation'] = train_df['Foundation'].replace({'Wood' : 1, 'Stone' : 2, 'Slab' : 3, 'PConc' : 4, 'CBlock' : 5, 'BrkTil' : 6})\n\ntrain_df['BsmtQual'] = train_df['BsmtQual'].replace({'NA' : 1, 'Po' : 2, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['BsmtCond'] = train_df['BsmtCond'].replace({'NA' : 1, 'Po' : 2, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['BsmtExposure'] = train_df['BsmtExposure'].replace({'NA' : 1, 'No' : 2, 'Mn': 3, 'Av' : 4, 'Gd' : 5})\n\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].replace({'NA' : 1, 'Unf' : 2, 'LwQ': 3, 'Rec' : 4, 'BLQ' : 5, 'ALQ' : 6, 'GLQ' : 7})\n\ntrain_df['BsmtFinType2'] = train_df['BsmtFinType2'].replace({'NA' : 1, 'Unf' : 2, 'LwQ': 3, 'Rec' : 4, 'BLQ' : 5, 'ALQ' : 6, 'GLQ' : 7})\n\ntrain_df['Heating'] = train_df['Heating'].replace({'Wall' : 1, 'OthW' : 2, 'Grav': 3, 'GasW' : 4, 'GasA' : 5, 'Floor' : 6})\n\ntrain_df['HeatingQC'] = train_df['HeatingQC'].replace({'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4,'Ex': 5})\n\ntrain_df['CentralAir'] = train_df['CentralAir'].replace({'Y': 0, 'N': 1})\n\ntrain_df['Electrical'] = train_df['Electrical'].replace({'Mix': 1, 'FuseF': 2, 'FuseA': 3, 'FuseP': 4, 'SBrkr': 5})\n\ntrain_df['KitchenQual'] = train_df['KitchenQual'].replace({'Fa': 1, 'TA': 2, 'Gd': 3, 'Ex': 4})\n\ntrain_df['Functional'] = train_df['Functional'].replace({'Sal': 1, 'Sev': 2, 'Maj2': 3, 'Maj1': 4, 'Mod': 5, 'Min2': 6, 'Min1': 7, 'Typ' : 8})","metadata":{"_uuid":"99eb8de0-babd-4d1c-a963-0e22fb235c72","_cell_guid":"0751162d-fd22-4db4-a34a-27093e254e8f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.775017Z","iopub.execute_input":"2023-10-01T05:55:46.77574Z","iopub.status.idle":"2023-10-01T05:55:46.814084Z","shell.execute_reply.started":"2023-10-01T05:55:46.775695Z","shell.execute_reply":"2023-10-01T05:55:46.813143Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_df['FireplaceQu'] = train_df['FireplaceQu'].replace({'NA' : 1, 'Po' : 2, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['GarageType'] = train_df['GarageType'].replace({'NA' : 1, 'Detchd' : 2, 'CarPort' : 3, 'BuiltIn' : 4, 'Basment' : 5, 'Attchd': 6, '2Types' : 7})\n\ntrain_df['GarageFinish'] = train_df['GarageFinish'].replace({'NA' : 1, 'Unf' : 2, 'RFn' : 3, 'Fin' : 4})\n\ntrain_df['GarageQual'] = train_df['GarageQual'].replace({'NA' : 1, 'Po' : 2, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['GarageCond'] = train_df['GarageCond'].replace({'NA' : 1, 'Po' : 2, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['PavedDrive'] = train_df['PavedDrive'].replace({'N' : 1, 'P' : 2, 'Y' : 3})\n\ntrain_df['PoolQC'] = train_df['PoolQC'].replace({'NA' : 1, 'Fa': 3, 'TA' : 4, 'Gd' : 5, 'Ex' : 6})\n\ntrain_df['Fence'] = train_df['Fence'].replace({'NA' : 1, 'MnWw' : 2, 'GdWo': 3, 'MnPrv' : 4, 'GdPrv' : 5})\n\ntrain_df['MiscFeature'] = train_df['MiscFeature'].replace({'NA' : 1, 'TenC' : 2, 'Shed' : 3, 'Othr' : 4, 'Gar2' : 5, 'Elev' : 6})\n\ntrain_df['SaleType'] = train_df['SaleType'].replace({'Oth' : 1, 'ConLD' : 2, 'ConLI' : 3, 'ConLw' : 4, 'Con' : 5, 'COD' : 6,\n                                                     'New' : 7, 'VWD' : 8, 'CWD' : 9, 'WD' : 10})\n\ntrain_df['SaleCondition'] = train_df['SaleCondition'].replace({'Partial' : 1, 'Family' : 2, 'Alloca' : 3, 'AdjLand' : 4, 'Abnorml' : 5, 'Normal' : 6})","metadata":{"_uuid":"1df2e72e-5507-4704-ab78-3cbc3a5da445","_cell_guid":"9f46b085-551e-412b-b005-67d0e78627df","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.81523Z","iopub.execute_input":"2023-10-01T05:55:46.815529Z","iopub.status.idle":"2023-10-01T05:55:46.842978Z","shell.execute_reply.started":"2023-10-01T05:55:46.815504Z","shell.execute_reply":"2023-10-01T05:55:46.841556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's fill in the missing values: Gonna drop the columns with more than 25% missing values, and use KNNImputer to impute missing values in the rest of columns","metadata":{"_uuid":"67cff659-e7de-4860-a3e0-e24939b6a35e","_cell_guid":"b896f662-31e0-4451-b67b-b631c0c2b4fc","trusted":true}},{"cell_type":"code","source":"percentage_missing = train_df.isnull().sum()[train_df.isnull().sum()>0]/len(train_df)*100","metadata":{"_uuid":"93fe1d8a-438b-4c57-a915-daeaac288cef","_cell_guid":"b3684565-c569-480e-99ec-fbdcffc8b5a6","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.844256Z","iopub.execute_input":"2023-10-01T05:55:46.844582Z","iopub.status.idle":"2023-10-01T05:55:46.859885Z","shell.execute_reply.started":"2023-10-01T05:55:46.844551Z","shell.execute_reply":"2023-10-01T05:55:46.85891Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"percentage_missing[percentage_missing > 25]","metadata":{"_uuid":"4ae93cc1-8ec8-4ee6-931a-9b019238ea1c","_cell_guid":"84d4d5b4-841a-4ac7-bf83-06b334b4a800","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.861386Z","iopub.execute_input":"2023-10-01T05:55:46.862071Z","iopub.status.idle":"2023-10-01T05:55:46.873318Z","shell.execute_reply.started":"2023-10-01T05:55:46.86203Z","shell.execute_reply":"2023-10-01T05:55:46.872035Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dropped_columns = ['Alley', 'MasVnrType', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature']\ntrain_df.drop(columns=dropped_columns, inplace=True)","metadata":{"_uuid":"d44bb58e-fef2-4b1a-9e22-1e3a8849dc4c","_cell_guid":"80a2e7c9-83cd-4379-bf6b-efd19ec24387","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.874573Z","iopub.execute_input":"2023-10-01T05:55:46.874956Z","iopub.status.idle":"2023-10-01T05:55:46.886718Z","shell.execute_reply.started":"2023-10-01T05:55:46.874899Z","shell.execute_reply":"2023-10-01T05:55:46.885949Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nknn_imputer = KNNImputer(n_neighbors=1)\nknn_imputed_dataset = knn_imputer.fit_transform(train_df)\nknn_imputed_dataset_df = pd.DataFrame(data=knn_imputed_dataset, columns=list(train_df.columns), index=list(train_df.index))\nknn_imputed_dataset_df.info()","metadata":{"_uuid":"ac0a7e3c-6ad2-406c-b0c7-c9cae6a7b4f3","_cell_guid":"2584656c-db0d-468f-91ca-c311a7313062","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:46.88774Z","iopub.execute_input":"2023-10-01T05:55:46.888445Z","iopub.status.idle":"2023-10-01T05:55:47.531402Z","shell.execute_reply.started":"2023-10-01T05:55:46.888403Z","shell.execute_reply":"2023-10-01T05:55:47.530309Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"let's prepare the training and testing dataset:","metadata":{"_uuid":"262cb498-27fa-4e83-8451-a11d515bcb40","_cell_guid":"421173dd-8dce-4903-9626-ce6be74c9ec6","trusted":true}},{"cell_type":"code","source":"X = knn_imputed_dataset_df.drop(columns=[\"SalePrice\"])\ny = knn_imputed_dataset_df[\"SalePrice\"]\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","metadata":{"_uuid":"4a311405-6d62-4f69-aef5-5258be1143c9","_cell_guid":"21fa86b6-74ef-4cbf-a8f9-2a818c0a6314","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.533006Z","iopub.execute_input":"2023-10-01T05:55:47.533672Z","iopub.status.idle":"2023-10-01T05:55:47.543771Z","shell.execute_reply.started":"2023-10-01T05:55:47.533631Z","shell.execute_reply":"2023-10-01T05:55:47.542869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Stage 3. Machine learning models","metadata":{"_uuid":"6aa74869-fc60-4f33-87cd-4cbe49f46b17","_cell_guid":"4629b167-91a6-4c33-95f8-40823a5835b9","trusted":true}},{"cell_type":"markdown","source":"I am going to try following models:\n\n1. regularised linear regression\n\n2. XGBoost\n\n3. RandomForest\n\n4. SVR\n\n5. Neural Networks","metadata":{"_uuid":"03738108-12f2-4d2a-a2c5-7c6b1a709d5a","_cell_guid":"6fceb6a7-c06b-4a57-8d2a-91751582324e","trusted":true}},{"cell_type":"markdown","source":"define model evaluation method:","metadata":{"_uuid":"db3e4cda-55de-4e1f-8bfa-6f2f1f0ebd88","_cell_guid":"8a615470-a1eb-41d8-813e-143a14851914","trusted":true}},{"cell_type":"code","source":"from sklearn.metrics import r2_score\nr2scores = {\"lasso_linear_regression\": 0, \"XGBoost\": 0, \"random_forest\": 0, \"svm\": 0, \"neural_networks\": 0}","metadata":{"_uuid":"bd330802-5c4f-4c1d-ad3a-2b4fba12744f","_cell_guid":"efa1c26a-c837-4e9d-86bf-18beb339e655","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.545345Z","iopub.execute_input":"2023-10-01T05:55:47.546455Z","iopub.status.idle":"2023-10-01T05:55:47.560779Z","shell.execute_reply.started":"2023-10-01T05:55:47.546412Z","shell.execute_reply":"2023-10-01T05:55:47.559721Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3.1 regularised linear regression","metadata":{"_uuid":"654d269c-1b5b-4a6c-8c01-6a8b4d538215","_cell_guid":"a6d9160b-adf0-445f-9998-a636953aad1f","trusted":true}},{"cell_type":"markdown","source":"since linear regression does better without outliers, I am going to remove potential outliers.","metadata":{"_uuid":"3bbb4eb0-8868-4b8f-ae3f-1f42a816c805","_cell_guid":"2a648c87-b903-48cc-89e2-32a1a1db0072","trusted":true}},{"cell_type":"code","source":"X_train_linear_regression = X_train\nfor column in list(X_train_linear_regression.columns):\n    Q1 = X_train_linear_regression[column].quantile(0.25)\n    Q3 = X_train_linear_regression[column].quantile(0.75)\n\n    IQR = Q3 - Q1\n\n    lower_bound = Q1 - 1.5*IQR\n    upper_bound = Q3 + 1.5*IQR\n\n    X_train_linear_regression[column] = np.where(X_train_linear_regression[column] < lower_bound, lower_bound, \n                                                       X_train_linear_regression[column])\n    X_train_linear_regression[column] = np.where(X_train_linear_regression[column] > upper_bound, upper_bound, \n                                                          X_train_linear_regression[column])","metadata":{"_uuid":"93d0478d-fdec-40cb-86f9-11e21ab72a15","_cell_guid":"8d32bd42-62df-4e6f-8ca6-19667cb9a89e","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.562515Z","iopub.execute_input":"2023-10-01T05:55:47.563693Z","iopub.status.idle":"2023-10-01T05:55:47.708887Z","shell.execute_reply.started":"2023-10-01T05:55:47.563648Z","shell.execute_reply":"2023-10-01T05:55:47.708033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\nstandard_scaler_X = StandardScaler().fit(X_train_linear_regression)\nX_train_lr_scaled = standard_scaler_X.transform(X_train_linear_regression)\nX_test_scaled = standard_scaler_X.transform(X_test)","metadata":{"_uuid":"93bc16c9-c239-4283-aa33-eaae344bd074","_cell_guid":"0b0533b3-815d-4cab-ad64-0fff5470a567","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.709832Z","iopub.execute_input":"2023-10-01T05:55:47.71063Z","iopub.status.idle":"2023-10-01T05:55:47.728061Z","shell.execute_reply.started":"2023-10-01T05:55:47.7106Z","shell.execute_reply":"2023-10-01T05:55:47.726958Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\nlasso_linear_regression = Lasso(alpha=0.1)\nlasso_linear_regression.fit(X_train_lr_scaled, y_train)","metadata":{"_uuid":"c0efc093-0bfc-46e0-bc93-26deaf2fc621","_cell_guid":"ce645cb0-cd7b-4213-8210-032141968f97","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.729548Z","iopub.execute_input":"2023-10-01T05:55:47.730687Z","iopub.status.idle":"2023-10-01T05:55:47.781156Z","shell.execute_reply.started":"2023-10-01T05:55:47.730637Z","shell.execute_reply":"2023-10-01T05:55:47.779957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's predict the Sale prices for test dataset","metadata":{"_uuid":"0f6372a3-a420-49be-9aa5-533c5cbf342c","_cell_guid":"ccc6d584-44f3-4c8c-8dec-10d4b5ce84b1","trusted":true}},{"cell_type":"code","source":"y_pred_llr = lasso_linear_regression.predict(X_test_scaled)","metadata":{"_uuid":"ac3e67ae-953d-44c8-bc3a-11237017f761","_cell_guid":"7d2078cf-e1c1-42eb-9b5f-f8d74b05b481","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.782719Z","iopub.execute_input":"2023-10-01T05:55:47.783513Z","iopub.status.idle":"2023-10-01T05:55:47.802809Z","shell.execute_reply.started":"2023-10-01T05:55:47.78346Z","shell.execute_reply":"2023-10-01T05:55:47.801413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_llr)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for regularised linear regression model\")\nplt.show()","metadata":{"_uuid":"0066dcd5-7f16-4750-8639-b3674e83f1de","_cell_guid":"c3f600d5-5dbe-4de6-a93c-ea405bf25773","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:47.805196Z","iopub.execute_input":"2023-10-01T05:55:47.807465Z","iopub.status.idle":"2023-10-01T05:55:48.134617Z","shell.execute_reply.started":"2023-10-01T05:55:47.807412Z","shell.execute_reply":"2023-10-01T05:55:48.133563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"most of scatter plot seems to be close to Line-of-Perfect-Prediction(green line, where predictions=actuals), means regularised linear regression seems to be perfoming well.","metadata":{"_uuid":"91d4e754-abe2-4fc3-99fe-b6892822c501","_cell_guid":"56dae80c-ccf5-4645-b859-ab9d5d9f0e17","trusted":true}},{"cell_type":"code","source":"r2scores[\"lasso_linear_regression\"] = r2_score(y_test, y_pred_llr)\nprint(r2scores[\"lasso_linear_regression\"])","metadata":{"_uuid":"8c62256d-bc5c-46fe-986c-73d60197eff1","_cell_guid":"436d5f4b-f329-4dee-9324-46a2255fd4d1","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:48.135826Z","iopub.execute_input":"2023-10-01T05:55:48.136218Z","iopub.status.idle":"2023-10-01T05:55:48.143345Z","shell.execute_reply.started":"2023-10-01T05:55:48.136188Z","shell.execute_reply":"2023-10-01T05:55:48.142061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Implies that regularised linear model has explained 87.1% of variance in test data","metadata":{"_uuid":"e89b5269-70e0-4519-ba33-4d80eb2df7fa","_cell_guid":"e5964d13-92b7-4bc6-b792-9abea0fa51f6","execution":{"iopub.status.busy":"2023-09-17T15:09:03.313322Z","iopub.execute_input":"2023-09-17T15:09:03.313806Z","iopub.status.idle":"2023-09-17T15:09:03.321666Z","shell.execute_reply.started":"2023-09-17T15:09:03.313769Z","shell.execute_reply":"2023-09-17T15:09:03.320061Z"},"trusted":true}},{"cell_type":"markdown","source":"# 3.2 XGBoost","metadata":{"_uuid":"b006d8b4-1830-44a5-b311-d69c28b95c37","_cell_guid":"4e982c02-3863-4b4c-a3fb-50287dd92893","trusted":true}},{"cell_type":"markdown","source":"install xgboost:","metadata":{"_uuid":"cdd3f6aa-b8c5-4ee1-8f4e-c151689f97d5","_cell_guid":"de51c2f8-dd4a-4238-a880-d847f45148fd","trusted":true}},{"cell_type":"code","source":"!pip install xgboost","metadata":{"_uuid":"c867fc2a-5ba6-42c7-9f8b-556be1380249","_cell_guid":"eb76e70c-7e4e-45ef-8551-f9587c112871","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:48.144538Z","iopub.execute_input":"2023-10-01T05:55:48.144861Z","iopub.status.idle":"2023-10-01T05:55:59.677532Z","shell.execute_reply.started":"2023-10-01T05:55:48.144824Z","shell.execute_reply":"2023-10-01T05:55:59.676127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"import XGBRegressor:","metadata":{"_uuid":"98520d19-2861-47c4-a804-ee40a57efa82","_cell_guid":"f520475d-96c5-4a2d-ba38-184cb5ab7402","trusted":true}},{"cell_type":"code","source":"import xgboost","metadata":{"_uuid":"6cfc9eea-0b77-433c-a418-7e48fe0d1ec9","_cell_guid":"51fed838-7f1e-45f5-aef7-c3bc8812e3c9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.679459Z","iopub.execute_input":"2023-10-01T05:55:59.679908Z","iopub.status.idle":"2023-10-01T05:55:59.888098Z","shell.execute_reply.started":"2023-10-01T05:55:59.679861Z","shell.execute_reply":"2023-10-01T05:55:59.887014Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBRegressor","metadata":{"_uuid":"ee7c59d0-da35-4b34-90eb-34db7bf77298","_cell_guid":"f2d9966a-49a6-403b-b556-fac32c59d5e2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.889657Z","iopub.execute_input":"2023-10-01T05:55:59.890134Z","iopub.status.idle":"2023-10-01T05:55:59.896417Z","shell.execute_reply.started":"2023-10-01T05:55:59.890093Z","shell.execute_reply":"2023-10-01T05:55:59.894998Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xgboost_model = XGBRegressor(random_state=42)","metadata":{"_uuid":"1401c485-7a18-4ca7-a198-93488433251b","_cell_guid":"f045eeff-3e5e-4483-8af5-e9f983decc8e","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.898293Z","iopub.execute_input":"2023-10-01T05:55:59.898734Z","iopub.status.idle":"2023-10-01T05:55:59.913308Z","shell.execute_reply.started":"2023-10-01T05:55:59.898694Z","shell.execute_reply":"2023-10-01T05:55:59.912013Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's tune the hyperparameters:","metadata":{"_uuid":"57cabd63-9c4e-48e7-94ed-4989e4a82b0a","_cell_guid":"fd47467e-85d2-4dcb-a342-fb9e5f43b71a","trusted":true}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV","metadata":{"_uuid":"34792f16-f9ec-4239-8efa-12fd794d2197","_cell_guid":"068d34c4-05b1-4e94-9509-97afb5d7c3d9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.916084Z","iopub.execute_input":"2023-10-01T05:55:59.916579Z","iopub.status.idle":"2023-10-01T05:55:59.934193Z","shell.execute_reply.started":"2023-10-01T05:55:59.916537Z","shell.execute_reply":"2023-10-01T05:55:59.933005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [3, 4, 5],\n    'learning_rate': [0.05, 0.1, 0.2],\n    'subsample': [0.8, 0.9, 1.0],\n    'colsample_bytree': [0.8, 0.9, 1.0],\n}","metadata":{"_uuid":"aa8f0dab-4382-4c3b-98ac-c2c0394fce84","_cell_guid":"64f0bedb-41a3-4a9a-950c-28d6e123734f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.935867Z","iopub.execute_input":"2023-10-01T05:55:59.936334Z","iopub.status.idle":"2023-10-01T05:55:59.947629Z","shell.execute_reply.started":"2023-10-01T05:55:59.936281Z","shell.execute_reply":"2023-10-01T05:55:59.946728Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search = GridSearchCV(estimator=xgboost_model, param_grid=param_grid, scoring='r2', cv=5, n_jobs=-1)\ngrid_search.fit(X_train, y_train)","metadata":{"_uuid":"f940f82f-41f8-4df2-8205-044c2a51a482","_cell_guid":"c9fd85a4-49d1-46c5-968d-783599a8d8ef","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T05:55:59.948758Z","iopub.execute_input":"2023-10-01T05:55:59.949096Z","iopub.status.idle":"2023-10-01T06:01:20.61799Z","shell.execute_reply.started":"2023-10-01T05:55:59.949068Z","shell.execute_reply":"2023-10-01T06:01:20.616654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_params = grid_search.best_params_\nprint(best_params)","metadata":{"_uuid":"025eb229-1844-4230-b89b-1f1a8791460b","_cell_guid":"4c74d6f3-b172-438a-921a-57283ea5859a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:01:20.620087Z","iopub.execute_input":"2023-10-01T06:01:20.621425Z","iopub.status.idle":"2023-10-01T06:01:20.627104Z","shell.execute_reply.started":"2023-10-01T06:01:20.621371Z","shell.execute_reply":"2023-10-01T06:01:20.626173Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"xgboost_model_tuned = grid_search.best_estimator_","metadata":{"_uuid":"ed3c59a7-8e0c-47fc-95c6-a55611269b45","_cell_guid":"32ff0484-d533-4a25-bd22-d94ee908893e","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:04:47.286089Z","iopub.execute_input":"2023-10-01T06:04:47.286585Z","iopub.status.idle":"2023-10-01T06:04:47.293114Z","shell.execute_reply.started":"2023-10-01T06:04:47.286551Z","shell.execute_reply":"2023-10-01T06:04:47.291616Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's predict Sale prices for test dataset using tuned XGBRegressor model:","metadata":{"_uuid":"2412affb-ca1c-4980-97b7-7a0acf59f4b0","_cell_guid":"fb2544d1-fe5a-4983-bc0c-be4fe6cf87c7","trusted":true}},{"cell_type":"code","source":"y_pred_xgboost = xgboost_model_tuned.predict(X_test)","metadata":{"_uuid":"a70a44ab-641b-4fe2-bb3d-f811d90b0c7b","_cell_guid":"c5a30f0d-663c-4840-b1f8-8ba20f88fd5e","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:04:50.145268Z","iopub.execute_input":"2023-10-01T06:04:50.146583Z","iopub.status.idle":"2023-10-01T06:04:50.167216Z","shell.execute_reply.started":"2023-10-01T06:04:50.146539Z","shell.execute_reply":"2023-10-01T06:04:50.165714Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_xgboost)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for xgboost regression model\")\nplt.show()","metadata":{"_uuid":"a110c856-66bd-4cfa-8c71-17ba652c39a9","_cell_guid":"4d44be5f-66af-4c39-a634-116f7e0453b0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:04:53.596649Z","iopub.execute_input":"2023-10-01T06:04:53.597087Z","iopub.status.idle":"2023-10-01T06:04:53.90144Z","shell.execute_reply.started":"2023-10-01T06:04:53.597049Z","shell.execute_reply":"2023-10-01T06:04:53.9001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"most of scatter plot seems to be close to Line-of-Perfect-Prediction(green line, where predictions=actuals), means XGBoost regression seems to be perfoming well.","metadata":{"_uuid":"1f1d3e6c-c7fe-4dde-9701-7b69a9729694","_cell_guid":"6d14105e-2dd1-4cbc-9e8f-646adefd9a13","trusted":true}},{"cell_type":"code","source":"r2scores[\"XGBoost\"] = r2_score(y_test, y_pred_xgboost)\nprint(r2scores[\"XGBoost\"])","metadata":{"_uuid":"718e58ee-09d7-43a4-bb01-d1f12a2a854e","_cell_guid":"711fad5d-97c2-474e-a788-5d5a0a5702ad","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:04:57.643756Z","iopub.execute_input":"2023-10-01T06:04:57.644136Z","iopub.status.idle":"2023-10-01T06:04:57.652304Z","shell.execute_reply.started":"2023-10-01T06:04:57.644108Z","shell.execute_reply":"2023-10-01T06:04:57.650831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Implies that xgboost regression has explained 90% of variance in test data.","metadata":{"_uuid":"384f53eb-c775-4435-bcbf-db059661db20","_cell_guid":"b7c4f6fe-371a-416d-aeee-d5f2c4bd6b37","trusted":true}},{"cell_type":"markdown","source":"# 3.3 Random Forest","metadata":{"_uuid":"6ab0d3af-1dc2-42b5-bdcb-4245c0385a76","_cell_guid":"b4a75d61-6492-4a14-a5e2-0430f5757020","trusted":true}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor","metadata":{"_uuid":"32d90a9d-5e7c-4608-9263-30f6eeda7c27","_cell_guid":"b6fd0e05-c6cf-4084-bd8a-c15f77afa5c0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:05:02.39665Z","iopub.execute_input":"2023-10-01T06:05:02.397114Z","iopub.status.idle":"2023-10-01T06:05:02.61407Z","shell.execute_reply.started":"2023-10-01T06:05:02.397079Z","shell.execute_reply":"2023-10-01T06:05:02.6127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"random_forest_model = RandomForestRegressor(oob_score=True)","metadata":{"_uuid":"c8470411-4f70-49d2-9006-e4265890848f","_cell_guid":"8e9589bb-0850-4057-9196-c7d5e330b11a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:05:08.35647Z","iopub.execute_input":"2023-10-01T06:05:08.356824Z","iopub.status.idle":"2023-10-01T06:05:08.363321Z","shell.execute_reply.started":"2023-10-01T06:05:08.356796Z","shell.execute_reply":"2023-10-01T06:05:08.361655Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [301, 501],\n    'max_features': [4, 12, 31, 36, 54, 73],\n    'max_depth': [7, 10],\n    'min_samples_leaf': [25, 50, 100],\n    'min_samples_split': [75, 150, 300]\n}","metadata":{"_uuid":"62c2399a-a701-4312-869e-684016bbab32","_cell_guid":"f77b2ad6-b152-4edd-884c-02b9f5144b6d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:05:16.951634Z","iopub.execute_input":"2023-10-01T06:05:16.952052Z","iopub.status.idle":"2023-10-01T06:05:16.958088Z","shell.execute_reply.started":"2023-10-01T06:05:16.952018Z","shell.execute_reply":"2023-10-01T06:05:16.956603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search_rf = GridSearchCV(estimator=random_forest_model, param_grid=param_grid, scoring='r2', cv=5, n_jobs=-1)\ngrid_search_rf.fit(X_train, y_train)","metadata":{"_uuid":"d66f455d-1493-4cd7-b2ca-cd9ecf602295","_cell_guid":"4413b914-bdce-4f0c-a5b7-e750d56ff976","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:05:21.584186Z","iopub.execute_input":"2023-10-01T06:05:21.584668Z","iopub.status.idle":"2023-10-01T06:13:21.367779Z","shell.execute_reply.started":"2023-10-01T06:05:21.584636Z","shell.execute_reply":"2023-10-01T06:13:21.366869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"grid_search_rf.best_params_","metadata":{"_uuid":"91c52354-384c-401d-9427-9d1752640b25","_cell_guid":"1d4a0595-ef03-4db7-8d45-d5afc4fffcb2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:14.006341Z","iopub.execute_input":"2023-10-01T06:14:14.00716Z","iopub.status.idle":"2023-10-01T06:14:14.017397Z","shell.execute_reply.started":"2023-10-01T06:14:14.007103Z","shell.execute_reply":"2023-10-01T06:14:14.015528Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"random_forest_model_tuned = grid_search_rf.best_estimator_","metadata":{"_uuid":"7796d169-4623-4aea-a722-013e7f8a59ca","_cell_guid":"e2a6f799-8921-49b9-a41a-7fbe09787ac4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:16.743894Z","iopub.execute_input":"2023-10-01T06:14:16.744302Z","iopub.status.idle":"2023-10-01T06:14:16.749443Z","shell.execute_reply.started":"2023-10-01T06:14:16.744269Z","shell.execute_reply":"2023-10-01T06:14:16.748122Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's predict Sale Prices for test data using tuned Random forest regression model","metadata":{"_uuid":"c8a1627e-b98a-4106-869c-3b24c3a3202e","_cell_guid":"0becb833-120e-4145-9f19-bb8cae14d8f8","trusted":true}},{"cell_type":"code","source":"y_pred_rf = random_forest_model_tuned.predict(X_test)","metadata":{"_uuid":"7e230540-14ce-404f-9a45-e70722c32e56","_cell_guid":"9496e76a-7b41-4d38-8280-d854df8d5ee3","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:19.909255Z","iopub.execute_input":"2023-10-01T06:14:19.909641Z","iopub.status.idle":"2023-10-01T06:14:19.937361Z","shell.execute_reply.started":"2023-10-01T06:14:19.909608Z","shell.execute_reply":"2023-10-01T06:14:19.936225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_rf)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for random forest regression model\")\nplt.show()","metadata":{"_uuid":"389ac248-e7ce-4f73-8ae9-a5b426a3af1a","_cell_guid":"020641a8-fb10-4226-9c09-78f9326d94fb","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:23.308582Z","iopub.execute_input":"2023-10-01T06:14:23.30899Z","iopub.status.idle":"2023-10-01T06:14:23.591619Z","shell.execute_reply.started":"2023-10-01T06:14:23.30894Z","shell.execute_reply":"2023-10-01T06:14:23.590477Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"most of scatter plot seems to be close to Line-of-Perfect-Prediction(green line, where predictions=actuals), means Random Forest regression seems to be perfoming well.","metadata":{"_uuid":"6653e3e1-7781-4fe4-b423-e4802815deb7","_cell_guid":"2fe145c6-7be2-4645-b356-23155fd638e9","trusted":true}},{"cell_type":"code","source":"r2scores[\"random_forest\"] = r2_score(y_test, y_pred_rf)\nprint(r2scores[\"random_forest\"])","metadata":{"_uuid":"b5056577-2542-480b-be4f-af22dd95b3e1","_cell_guid":"16e57e3b-2c53-49cf-b499-034269fb10e9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:29.37256Z","iopub.execute_input":"2023-10-01T06:14:29.372951Z","iopub.status.idle":"2023-10-01T06:14:29.379843Z","shell.execute_reply.started":"2023-10-01T06:14:29.372908Z","shell.execute_reply":"2023-10-01T06:14:29.378734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Implies that random forest regression model has explained 79.8% of variance in test data.","metadata":{"_uuid":"36e9192e-d6e4-4f45-8e96-d33b7cdedb83","_cell_guid":"3cd115fd-e520-46ee-a4e8-dd51fa584b21","trusted":true}},{"cell_type":"markdown","source":"# 3.4 SVM","metadata":{"_uuid":"aaeb22b8-d78e-4340-8468-f647c91afb8a","_cell_guid":"3be1c172-459e-4bd7-b20b-cce539a0120d","trusted":true}},{"cell_type":"code","source":"from sklearn.svm import SVR","metadata":{"_uuid":"5d56bd17-6db2-45d6-9ddd-c210b7fb7647","_cell_guid":"1d614896-dde1-4f1a-b15e-b17e980ac099","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:33.89108Z","iopub.execute_input":"2023-10-01T06:14:33.891518Z","iopub.status.idle":"2023-10-01T06:14:33.896248Z","shell.execute_reply.started":"2023-10-01T06:14:33.891486Z","shell.execute_reply":"2023-10-01T06:14:33.895085Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"since SVM is also prone to outlieres and does better with normalised data, I am going to use same X_train_scaled and X_test_scaled for SVM as used for regularised linear regression","metadata":{"_uuid":"ec4e65cb-3282-4a90-bf51-e26d8ec9ab1b","_cell_guid":"da317013-5c86-470e-bf0e-a21537fa35aa","trusted":true}},{"cell_type":"code","source":"svr_model = SVR()\nsvr_model.fit(X=X_train_lr_scaled, y=y_train)","metadata":{"_uuid":"13b02661-511d-424a-a54a-33c2d9b91cde","_cell_guid":"515e9111-2635-4e7a-afa9-6769c798f19f","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:38.257586Z","iopub.execute_input":"2023-10-01T06:14:38.257975Z","iopub.status.idle":"2023-10-01T06:14:38.346171Z","shell.execute_reply.started":"2023-10-01T06:14:38.257934Z","shell.execute_reply":"2023-10-01T06:14:38.345001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's predict Sale Prices for test data using SVM regression model","metadata":{"_uuid":"b45fda22-71b2-4560-89d9-2029958171cf","_cell_guid":"80da6fd7-7fe5-4571-a62b-497a00d8ab9f","trusted":true}},{"cell_type":"code","source":"y_pred_svr = svr_model.predict(X_test_scaled)","metadata":{"_uuid":"bfeac8b0-4f48-4f2f-b389-823ac0ceee54","_cell_guid":"21e5e520-c2cb-4047-86a0-27ceaa33e3d4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:45.289133Z","iopub.execute_input":"2023-10-01T06:14:45.289516Z","iopub.status.idle":"2023-10-01T06:14:45.337518Z","shell.execute_reply.started":"2023-10-01T06:14:45.289485Z","shell.execute_reply":"2023-10-01T06:14:45.336348Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_svr)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for svm regression model\")\nplt.show()","metadata":{"_uuid":"2231d714-719f-466f-a9c1-a24afece3c4c","_cell_guid":"0e14029a-1efa-40de-8edb-7de91206d5c9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:51.28679Z","iopub.execute_input":"2023-10-01T06:14:51.287263Z","iopub.status.idle":"2023-10-01T06:14:51.612738Z","shell.execute_reply.started":"2023-10-01T06:14:51.287229Z","shell.execute_reply":"2023-10-01T06:14:51.611246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"most of scatter plot doesn't seem to be close to Line-of-Perfect-Prediction(green line, where predictions=actuals), means SVM regression has performed poorly.","metadata":{"_uuid":"8ef0704d-ff26-412e-a429-50ff4edebf9c","_cell_guid":"79f57953-bb47-4e6a-8a54-271d7b83a2c0","trusted":true}},{"cell_type":"code","source":"r2scores[\"svm\"] = r2_score(y_test, y_pred_svr)\nprint(r2scores[\"svm\"])","metadata":{"_uuid":"3b75c41d-21c4-48a6-a5a5-17e76daec306","_cell_guid":"b83667a1-243a-402e-ae25-0c0ef6267a35","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:14:57.13462Z","iopub.execute_input":"2023-10-01T06:14:57.135026Z","iopub.status.idle":"2023-10-01T06:14:57.142955Z","shell.execute_reply.started":"2023-10-01T06:14:57.134996Z","shell.execute_reply":"2023-10-01T06:14:57.141526Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Implies that SVM regression performed very poorly as R2 score is negative.","metadata":{"_uuid":"530d983d-d665-49cc-852c-44e317d5c8af","_cell_guid":"b3617978-0bc7-4cb5-a1d0-870df7067cf2","trusted":true}},{"cell_type":"markdown","source":"# 3.5 Neural Networks","metadata":{"_uuid":"f1b3bd55-7876-433e-91cf-b44e09cee741","_cell_guid":"d6355023-70f5-43cd-bd36-73e438131273","trusted":true}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout","metadata":{"_uuid":"010148d6-713a-45bf-aafd-4b1faaaae782","_cell_guid":"e74dedab-1a7e-4e7c-9710-050c87ed0d1b","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:01.555495Z","iopub.execute_input":"2023-10-01T06:15:01.555942Z","iopub.status.idle":"2023-10-01T06:15:11.968858Z","shell.execute_reply.started":"2023-10-01T06:15:01.555883Z","shell.execute_reply":"2023-10-01T06:15:11.967738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since neural networks does better with normalised data, I am going to tranform X_train and X_test with StandardScaler","metadata":{"_uuid":"7536329c-ed0b-4a6d-9be8-a880db3f873e","_cell_guid":"5a763809-9a71-4f57-9e58-1e4f1c9ae13d","trusted":true}},{"cell_type":"code","source":"scaler_nn_X = StandardScaler().fit(X_train)\nX_train_nn_scaled = scaler_nn_X.transform(X_train)\nX_test_nn_scaled = scaler_nn_X.transform(X_test)\n\ny_train_reshaped = y_train.to_numpy().reshape(-1, 1)\nscaler_nn_y = StandardScaler().fit(y_train_reshaped)\ny_train_nn_scaled = scaler_nn_y.transform(y_train_reshaped)\n\ny_test_reshaped = y_test.to_numpy().reshape(-1, 1)\ny_test_nn_scaled = scaler_nn_y.transform(y_test_reshaped)","metadata":{"_uuid":"0585db0f-636e-4c77-a28d-2d1df1fd6618","_cell_guid":"b1d71408-dc79-425e-ab0c-365e0d9c6ce2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:14.040199Z","iopub.execute_input":"2023-10-01T06:15:14.041029Z","iopub.status.idle":"2023-10-01T06:15:14.062896Z","shell.execute_reply.started":"2023-10-01T06:15:14.040991Z","shell.execute_reply":"2023-10-01T06:15:14.061679Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nn_model = Sequential()\nnn_model.add(Dense(32, input_shape=(X_train_nn_scaled.shape[1],), activation='relu'))\nnn_model.add(Dropout(0.4))\nnn_model.add(Dense(16, activation='relu'))\nnn_model.add(Dropout(0.4))\nnn_model.add(Dense(1))","metadata":{"_uuid":"34b3aacd-0382-46f8-ab46-b7b13b64db06","_cell_guid":"8c7d9873-43a5-45be-a255-d3ab7500f151","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:18.786433Z","iopub.execute_input":"2023-10-01T06:15:18.786835Z","iopub.status.idle":"2023-10-01T06:15:19.006482Z","shell.execute_reply.started":"2023-10-01T06:15:18.786799Z","shell.execute_reply":"2023-10-01T06:15:19.004256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nn_model.compile(loss='mse', optimizer='sgd', metrics=['mse'])","metadata":{"_uuid":"f98026e0-80ba-4f73-b0e3-4e43df48ed74","_cell_guid":"e17ced6c-58cf-45bf-830a-9e28eb0c25fa","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:24.072283Z","iopub.execute_input":"2023-10-01T06:15:24.072646Z","iopub.status.idle":"2023-10-01T06:15:24.094964Z","shell.execute_reply.started":"2023-10-01T06:15:24.072618Z","shell.execute_reply":"2023-10-01T06:15:24.094026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nn_model.fit(X_train_nn_scaled, y_train_nn_scaled, epochs=5, batch_size=32, validation_split=0.2)","metadata":{"_uuid":"5b00f743-0f62-4931-bbc3-d089945dfab7","_cell_guid":"cb264965-5d2e-4eed-8463-454a4872b6d4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:28.024525Z","iopub.execute_input":"2023-10-01T06:15:28.024946Z","iopub.status.idle":"2023-10-01T06:15:29.633579Z","shell.execute_reply.started":"2023-10-01T06:15:28.024892Z","shell.execute_reply":"2023-10-01T06:15:29.632215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's predict Sale prices for test data using Neural Networks model:","metadata":{"_uuid":"3eb51ad1-4b79-4fd6-b86a-cfad1c596f91","_cell_guid":"e4e56730-92f0-4b7a-8769-c75934cc9672","trusted":true}},{"cell_type":"code","source":"y_pred_nn_scaled = nn_model(X_test_nn_scaled)\ny_pred_nn_scaled = y_pred_nn_scaled.numpy().reshape(-1, 1)\ny_pred_nn_unscaled = scaler_nn_y.inverse_transform(y_pred_nn_scaled)","metadata":{"_uuid":"095ae52c-fcf6-45ed-8fcc-1d022cbf6a03","_cell_guid":"b4dfa32a-14a8-4028-b230-1cace7bc98c4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:33.874003Z","iopub.execute_input":"2023-10-01T06:15:33.874425Z","iopub.status.idle":"2023-10-01T06:15:33.905903Z","shell.execute_reply.started":"2023-10-01T06:15:33.874393Z","shell.execute_reply":"2023-10-01T06:15:33.904978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_nn_unscaled)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for neural networks regression model\")\nplt.show()","metadata":{"_uuid":"0ae7f67f-5836-449d-af36-52571187bc77","_cell_guid":"48975421-a45f-4f1d-8e3a-75533d9e43b2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:38.278661Z","iopub.execute_input":"2023-10-01T06:15:38.279076Z","iopub.status.idle":"2023-10-01T06:15:38.617725Z","shell.execute_reply.started":"2023-10-01T06:15:38.279038Z","shell.execute_reply":"2023-10-01T06:15:38.616233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"most of scatter plot seems to be close to Line-of-Perfect-Prediction(green line, where predictions=actuals), but most of predicted Sale Prices are less than 0.25. Clearly our Neural Networks model is overfitting on redundant feature like \"Sale Prices must be close to 0\"","metadata":{"_uuid":"ed86e13d-6942-49c2-b6d8-3adcbe0981e7","_cell_guid":"03599db0-e5f1-488b-bbf6-5bce801df03d","trusted":true}},{"cell_type":"code","source":"r2scores[\"neural_networks\"] = r2_score(y_test, y_pred_nn_unscaled)\nprint(r2scores[\"neural_networks\"])","metadata":{"_uuid":"7d516d8f-ddb6-424a-91b5-3b0d91191bf2","_cell_guid":"e4ed5221-7588-450d-a411-e53118ec89ed","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:43.850745Z","iopub.execute_input":"2023-10-01T06:15:43.851166Z","iopub.status.idle":"2023-10-01T06:15:43.858291Z","shell.execute_reply.started":"2023-10-01T06:15:43.851134Z","shell.execute_reply":"2023-10-01T06:15:43.85723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Implies that Neural networs performed poorly as R2 score is negative.","metadata":{"_uuid":"7e687a5f-ed7f-423e-9f1f-01de5a6e4bc3","_cell_guid":"c1b347ae-2e6b-4ff1-a0d2-a8b7dcc752f2","trusted":true}},{"cell_type":"code","source":"print(\"R2 score for regularised linear regression model: \", r2scores[\"lasso_linear_regression\"])\nprint(\"R2 score for XGBoost regression model: \", r2scores[\"XGBoost\"])\nprint(\"R2 score for random forest regression model: \", r2scores[\"random_forest\"])\nprint(\"R2 score for svm regression model: \", r2scores[\"svm\"])\nprint(\"R2 score for neural networks regression model: \", r2scores[\"neural_networks\"])","metadata":{"_uuid":"4477a287-d202-4c03-955b-0034a1cbd0cc","_cell_guid":"210137c6-e317-40ad-975b-4ea5bf7b328a","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:48.99391Z","iopub.execute_input":"2023-10-01T06:15:48.994377Z","iopub.status.idle":"2023-10-01T06:15:49.002292Z","shell.execute_reply.started":"2023-10-01T06:15:48.994345Z","shell.execute_reply":"2023-10-01T06:15:49.000966Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Stage 4: Aggregation of predictions","metadata":{"_uuid":"b71d60ed-c521-410a-914d-6df16bf34e10","_cell_guid":"eb41e4f3-6394-444c-8e3f-8bcdbcf4fefb","trusted":true}},{"cell_type":"markdown","source":"since relularised linear regression model and XGBoost model has highest R2 scores, I am going to combine thier predictions by taking average, proceed with final predictions","metadata":{"_uuid":"6c5796e8-8298-41f7-af85-4d6bd731c2b6","_cell_guid":"4842271c-e0eb-4d44-91e7-5c32b24fe94d","trusted":true}},{"cell_type":"code","source":"y_pred_final = (y_pred_llr + y_pred_xgboost)/2","metadata":{"_uuid":"ab979ab4-f01f-4ab6-b399-dfc8be7874b6","_cell_guid":"60051648-f9ce-4fad-898c-f02ae23145eb","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:15:56.524053Z","iopub.execute_input":"2023-10-01T06:15:56.524478Z","iopub.status.idle":"2023-10-01T06:15:56.530356Z","shell.execute_reply.started":"2023-10-01T06:15:56.524443Z","shell.execute_reply":"2023-10-01T06:15:56.528874Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred_final)\nplt.plot([0,max(y_test)], [0, max(y_test)], \"go--\")\nplt.xlabel(\"Actual Sales Prices\")\nplt.ylabel(\"Predicted Sales Prices\")\nplt.title(\"Actual vs. Predicted  Sales Prices for combined regression model\")\nplt.show()","metadata":{"_uuid":"c7472b7a-ce98-4cba-acdb-303f0bb7630f","_cell_guid":"d2a503c7-2e8b-487f-bc9a-12acf7a45b2b","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:16:01.057571Z","iopub.execute_input":"2023-10-01T06:16:01.058048Z","iopub.status.idle":"2023-10-01T06:16:01.338264Z","shell.execute_reply.started":"2023-10-01T06:16:01.058015Z","shell.execute_reply":"2023-10-01T06:16:01.336518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(r2_score(y_test, y_pred_final))","metadata":{"_uuid":"4bc1a84b-57bd-40fa-b41e-74e2b3cdeabe","_cell_guid":"1f75b535-1560-4e80-956a-e996f7a311d2","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-10-01T06:16:06.272939Z","iopub.execute_input":"2023-10-01T06:16:06.273338Z","iopub.status.idle":"2023-10-01T06:16:06.279721Z","shell.execute_reply.started":"2023-10-01T06:16:06.273305Z","shell.execute_reply":"2023-10-01T06:16:06.278835Z"},"trusted":true},"execution_count":null,"outputs":[]}]}